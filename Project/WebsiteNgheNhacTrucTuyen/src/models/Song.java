/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package models;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-08-07")
public class Song implements org.apache.thrift.TBase<Song, Song._Fields>, java.io.Serializable, Cloneable, Comparable<Song> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Song");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ALBUM_FIELD_DESC = new org.apache.thrift.protocol.TField("album", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField LYRICS_FIELD_DESC = new org.apache.thrift.protocol.TField("lyrics", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COMPOSERS_FIELD_DESC = new org.apache.thrift.protocol.TField("composers", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField KARA_FIELD_DESC = new org.apache.thrift.protocol.TField("kara", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I16, (short)7);
  private static final org.apache.thrift.protocol.TField KINDS_FIELD_DESC = new org.apache.thrift.protocol.TField("kinds", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField SINGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("singers", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField VIEWS_FIELD_DESC = new org.apache.thrift.protocol.TField("views", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField IMAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("image", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SongStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SongTupleSchemeFactory());
  }

  public String id; // required
  public String name; // required
  public models.Referencer album; // required
  public String lyrics; // required
  public List<String> composers; // required
  public String kara; // required
  public short duration; // required
  public List<models.Referencer> kinds; // required
  public List<models.Referencer> singers; // required
  public long views; // required
  public String comment; // required
  public String image; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    ALBUM((short)3, "album"),
    LYRICS((short)4, "lyrics"),
    COMPOSERS((short)5, "composers"),
    KARA((short)6, "kara"),
    DURATION((short)7, "duration"),
    KINDS((short)8, "kinds"),
    SINGERS((short)9, "singers"),
    VIEWS((short)10, "views"),
    COMMENT((short)11, "comment"),
    IMAGE((short)12, "image");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // ALBUM
          return ALBUM;
        case 4: // LYRICS
          return LYRICS;
        case 5: // COMPOSERS
          return COMPOSERS;
        case 6: // KARA
          return KARA;
        case 7: // DURATION
          return DURATION;
        case 8: // KINDS
          return KINDS;
        case 9: // SINGERS
          return SINGERS;
        case 10: // VIEWS
          return VIEWS;
        case 11: // COMMENT
          return COMMENT;
        case 12: // IMAGE
          return IMAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DURATION_ISSET_ID = 0;
  private static final int __VIEWS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ALBUM, new org.apache.thrift.meta_data.FieldMetaData("album", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, models.Referencer.class)));
    tmpMap.put(_Fields.LYRICS, new org.apache.thrift.meta_data.FieldMetaData("lyrics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPOSERS, new org.apache.thrift.meta_data.FieldMetaData("composers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.KARA, new org.apache.thrift.meta_data.FieldMetaData("kara", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.KINDS, new org.apache.thrift.meta_data.FieldMetaData("kinds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, models.Referencer.class))));
    tmpMap.put(_Fields.SINGERS, new org.apache.thrift.meta_data.FieldMetaData("singers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, models.Referencer.class))));
    tmpMap.put(_Fields.VIEWS, new org.apache.thrift.meta_data.FieldMetaData("views", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE, new org.apache.thrift.meta_data.FieldMetaData("image", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Song.class, metaDataMap);
  }

  public Song() {
    this.duration = (short)0;

  }

  public Song(
    String id,
    String name,
    models.Referencer album,
    String lyrics,
    List<String> composers,
    String kara,
    short duration,
    List<models.Referencer> kinds,
    List<models.Referencer> singers,
    long views,
    String comment,
    String image)
  {
    this();
    this.id = id;
    this.name = name;
    this.album = album;
    this.lyrics = lyrics;
    this.composers = composers;
    this.kara = kara;
    this.duration = duration;
    setDurationIsSet(true);
    this.kinds = kinds;
    this.singers = singers;
    this.views = views;
    setViewsIsSet(true);
    this.comment = comment;
    this.image = image;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Song(Song other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetAlbum()) {
      this.album = new models.Referencer(other.album);
    }
    if (other.isSetLyrics()) {
      this.lyrics = other.lyrics;
    }
    if (other.isSetComposers()) {
      List<String> __this__composers = new ArrayList<String>(other.composers);
      this.composers = __this__composers;
    }
    if (other.isSetKara()) {
      this.kara = other.kara;
    }
    this.duration = other.duration;
    if (other.isSetKinds()) {
      List<models.Referencer> __this__kinds = new ArrayList<models.Referencer>(other.kinds.size());
      for (models.Referencer other_element : other.kinds) {
        __this__kinds.add(new models.Referencer(other_element));
      }
      this.kinds = __this__kinds;
    }
    if (other.isSetSingers()) {
      List<models.Referencer> __this__singers = new ArrayList<models.Referencer>(other.singers.size());
      for (models.Referencer other_element : other.singers) {
        __this__singers.add(new models.Referencer(other_element));
      }
      this.singers = __this__singers;
    }
    this.views = other.views;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetImage()) {
      this.image = other.image;
    }
  }

  public Song deepCopy() {
    return new Song(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.album = null;
    this.lyrics = null;
    this.composers = null;
    this.kara = null;
    this.duration = (short)0;

    this.kinds = null;
    this.singers = null;
    setViewsIsSet(false);
    this.views = 0;
    this.comment = null;
    this.image = null;
  }

  public String getId() {
    return this.id;
  }

  public Song setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Song setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public models.Referencer getAlbum() {
    return this.album;
  }

  public Song setAlbum(models.Referencer album) {
    this.album = album;
    return this;
  }

  public void unsetAlbum() {
    this.album = null;
  }

  /** Returns true if field album is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbum() {
    return this.album != null;
  }

  public void setAlbumIsSet(boolean value) {
    if (!value) {
      this.album = null;
    }
  }

  public String getLyrics() {
    return this.lyrics;
  }

  public Song setLyrics(String lyrics) {
    this.lyrics = lyrics;
    return this;
  }

  public void unsetLyrics() {
    this.lyrics = null;
  }

  /** Returns true if field lyrics is set (has been assigned a value) and false otherwise */
  public boolean isSetLyrics() {
    return this.lyrics != null;
  }

  public void setLyricsIsSet(boolean value) {
    if (!value) {
      this.lyrics = null;
    }
  }

  public int getComposersSize() {
    return (this.composers == null) ? 0 : this.composers.size();
  }

  public java.util.Iterator<String> getComposersIterator() {
    return (this.composers == null) ? null : this.composers.iterator();
  }

  public void addToComposers(String elem) {
    if (this.composers == null) {
      this.composers = new ArrayList<String>();
    }
    this.composers.add(elem);
  }

  public List<String> getComposers() {
    return this.composers;
  }

  public Song setComposers(List<String> composers) {
    this.composers = composers;
    return this;
  }

  public void unsetComposers() {
    this.composers = null;
  }

  /** Returns true if field composers is set (has been assigned a value) and false otherwise */
  public boolean isSetComposers() {
    return this.composers != null;
  }

  public void setComposersIsSet(boolean value) {
    if (!value) {
      this.composers = null;
    }
  }

  public String getKara() {
    return this.kara;
  }

  public Song setKara(String kara) {
    this.kara = kara;
    return this;
  }

  public void unsetKara() {
    this.kara = null;
  }

  /** Returns true if field kara is set (has been assigned a value) and false otherwise */
  public boolean isSetKara() {
    return this.kara != null;
  }

  public void setKaraIsSet(boolean value) {
    if (!value) {
      this.kara = null;
    }
  }

  public short getDuration() {
    return this.duration;
  }

  public Song setDuration(short duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public int getKindsSize() {
    return (this.kinds == null) ? 0 : this.kinds.size();
  }

  public java.util.Iterator<models.Referencer> getKindsIterator() {
    return (this.kinds == null) ? null : this.kinds.iterator();
  }

  public void addToKinds(models.Referencer elem) {
    if (this.kinds == null) {
      this.kinds = new ArrayList<models.Referencer>();
    }
    this.kinds.add(elem);
  }

  public List<models.Referencer> getKinds() {
    return this.kinds;
  }

  public Song setKinds(List<models.Referencer> kinds) {
    this.kinds = kinds;
    return this;
  }

  public void unsetKinds() {
    this.kinds = null;
  }

  /** Returns true if field kinds is set (has been assigned a value) and false otherwise */
  public boolean isSetKinds() {
    return this.kinds != null;
  }

  public void setKindsIsSet(boolean value) {
    if (!value) {
      this.kinds = null;
    }
  }

  public int getSingersSize() {
    return (this.singers == null) ? 0 : this.singers.size();
  }

  public java.util.Iterator<models.Referencer> getSingersIterator() {
    return (this.singers == null) ? null : this.singers.iterator();
  }

  public void addToSingers(models.Referencer elem) {
    if (this.singers == null) {
      this.singers = new ArrayList<models.Referencer>();
    }
    this.singers.add(elem);
  }

  public List<models.Referencer> getSingers() {
    return this.singers;
  }

  public Song setSingers(List<models.Referencer> singers) {
    this.singers = singers;
    return this;
  }

  public void unsetSingers() {
    this.singers = null;
  }

  /** Returns true if field singers is set (has been assigned a value) and false otherwise */
  public boolean isSetSingers() {
    return this.singers != null;
  }

  public void setSingersIsSet(boolean value) {
    if (!value) {
      this.singers = null;
    }
  }

  public long getViews() {
    return this.views;
  }

  public Song setViews(long views) {
    this.views = views;
    setViewsIsSet(true);
    return this;
  }

  public void unsetViews() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VIEWS_ISSET_ID);
  }

  /** Returns true if field views is set (has been assigned a value) and false otherwise */
  public boolean isSetViews() {
    return EncodingUtils.testBit(__isset_bitfield, __VIEWS_ISSET_ID);
  }

  public void setViewsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VIEWS_ISSET_ID, value);
  }

  public String getComment() {
    return this.comment;
  }

  public Song setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  public String getImage() {
    return this.image;
  }

  public Song setImage(String image) {
    this.image = image;
    return this;
  }

  public void unsetImage() {
    this.image = null;
  }

  /** Returns true if field image is set (has been assigned a value) and false otherwise */
  public boolean isSetImage() {
    return this.image != null;
  }

  public void setImageIsSet(boolean value) {
    if (!value) {
      this.image = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ALBUM:
      if (value == null) {
        unsetAlbum();
      } else {
        setAlbum((models.Referencer)value);
      }
      break;

    case LYRICS:
      if (value == null) {
        unsetLyrics();
      } else {
        setLyrics((String)value);
      }
      break;

    case COMPOSERS:
      if (value == null) {
        unsetComposers();
      } else {
        setComposers((List<String>)value);
      }
      break;

    case KARA:
      if (value == null) {
        unsetKara();
      } else {
        setKara((String)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Short)value);
      }
      break;

    case KINDS:
      if (value == null) {
        unsetKinds();
      } else {
        setKinds((List<models.Referencer>)value);
      }
      break;

    case SINGERS:
      if (value == null) {
        unsetSingers();
      } else {
        setSingers((List<models.Referencer>)value);
      }
      break;

    case VIEWS:
      if (value == null) {
        unsetViews();
      } else {
        setViews((Long)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case IMAGE:
      if (value == null) {
        unsetImage();
      } else {
        setImage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case ALBUM:
      return getAlbum();

    case LYRICS:
      return getLyrics();

    case COMPOSERS:
      return getComposers();

    case KARA:
      return getKara();

    case DURATION:
      return getDuration();

    case KINDS:
      return getKinds();

    case SINGERS:
      return getSingers();

    case VIEWS:
      return getViews();

    case COMMENT:
      return getComment();

    case IMAGE:
      return getImage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case ALBUM:
      return isSetAlbum();
    case LYRICS:
      return isSetLyrics();
    case COMPOSERS:
      return isSetComposers();
    case KARA:
      return isSetKara();
    case DURATION:
      return isSetDuration();
    case KINDS:
      return isSetKinds();
    case SINGERS:
      return isSetSingers();
    case VIEWS:
      return isSetViews();
    case COMMENT:
      return isSetComment();
    case IMAGE:
      return isSetImage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Song)
      return this.equals((Song)that);
    return false;
  }

  public boolean equals(Song that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_album = true && this.isSetAlbum();
    boolean that_present_album = true && that.isSetAlbum();
    if (this_present_album || that_present_album) {
      if (!(this_present_album && that_present_album))
        return false;
      if (!this.album.equals(that.album))
        return false;
    }

    boolean this_present_lyrics = true && this.isSetLyrics();
    boolean that_present_lyrics = true && that.isSetLyrics();
    if (this_present_lyrics || that_present_lyrics) {
      if (!(this_present_lyrics && that_present_lyrics))
        return false;
      if (!this.lyrics.equals(that.lyrics))
        return false;
    }

    boolean this_present_composers = true && this.isSetComposers();
    boolean that_present_composers = true && that.isSetComposers();
    if (this_present_composers || that_present_composers) {
      if (!(this_present_composers && that_present_composers))
        return false;
      if (!this.composers.equals(that.composers))
        return false;
    }

    boolean this_present_kara = true && this.isSetKara();
    boolean that_present_kara = true && that.isSetKara();
    if (this_present_kara || that_present_kara) {
      if (!(this_present_kara && that_present_kara))
        return false;
      if (!this.kara.equals(that.kara))
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_kinds = true && this.isSetKinds();
    boolean that_present_kinds = true && that.isSetKinds();
    if (this_present_kinds || that_present_kinds) {
      if (!(this_present_kinds && that_present_kinds))
        return false;
      if (!this.kinds.equals(that.kinds))
        return false;
    }

    boolean this_present_singers = true && this.isSetSingers();
    boolean that_present_singers = true && that.isSetSingers();
    if (this_present_singers || that_present_singers) {
      if (!(this_present_singers && that_present_singers))
        return false;
      if (!this.singers.equals(that.singers))
        return false;
    }

    boolean this_present_views = true;
    boolean that_present_views = true;
    if (this_present_views || that_present_views) {
      if (!(this_present_views && that_present_views))
        return false;
      if (this.views != that.views)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_image = true && this.isSetImage();
    boolean that_present_image = true && that.isSetImage();
    if (this_present_image || that_present_image) {
      if (!(this_present_image && that_present_image))
        return false;
      if (!this.image.equals(that.image))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_album = true && (isSetAlbum());
    list.add(present_album);
    if (present_album)
      list.add(album);

    boolean present_lyrics = true && (isSetLyrics());
    list.add(present_lyrics);
    if (present_lyrics)
      list.add(lyrics);

    boolean present_composers = true && (isSetComposers());
    list.add(present_composers);
    if (present_composers)
      list.add(composers);

    boolean present_kara = true && (isSetKara());
    list.add(present_kara);
    if (present_kara)
      list.add(kara);

    boolean present_duration = true;
    list.add(present_duration);
    if (present_duration)
      list.add(duration);

    boolean present_kinds = true && (isSetKinds());
    list.add(present_kinds);
    if (present_kinds)
      list.add(kinds);

    boolean present_singers = true && (isSetSingers());
    list.add(present_singers);
    if (present_singers)
      list.add(singers);

    boolean present_views = true;
    list.add(present_views);
    if (present_views)
      list.add(views);

    boolean present_comment = true && (isSetComment());
    list.add(present_comment);
    if (present_comment)
      list.add(comment);

    boolean present_image = true && (isSetImage());
    list.add(present_image);
    if (present_image)
      list.add(image);

    return list.hashCode();
  }

  @Override
  public int compareTo(Song other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbum()).compareTo(other.isSetAlbum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.album, other.album);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLyrics()).compareTo(other.isSetLyrics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLyrics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lyrics, other.lyrics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposers()).compareTo(other.isSetComposers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composers, other.composers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKara()).compareTo(other.isSetKara());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKara()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kara, other.kara);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(other.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, other.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKinds()).compareTo(other.isSetKinds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKinds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kinds, other.kinds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSingers()).compareTo(other.isSetSingers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSingers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.singers, other.singers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViews()).compareTo(other.isSetViews());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViews()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.views, other.views);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(other.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, other.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImage()).compareTo(other.isSetImage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image, other.image);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Song(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("album:");
    if (this.album == null) {
      sb.append("null");
    } else {
      sb.append(this.album);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lyrics:");
    if (this.lyrics == null) {
      sb.append("null");
    } else {
      sb.append(this.lyrics);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("composers:");
    if (this.composers == null) {
      sb.append("null");
    } else {
      sb.append(this.composers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kara:");
    if (this.kara == null) {
      sb.append("null");
    } else {
      sb.append(this.kara);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("kinds:");
    if (this.kinds == null) {
      sb.append("null");
    } else {
      sb.append(this.kinds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("singers:");
    if (this.singers == null) {
      sb.append("null");
    } else {
      sb.append(this.singers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("views:");
    sb.append(this.views);
    first = false;
    if (!first) sb.append(", ");
    sb.append("comment:");
    if (this.comment == null) {
      sb.append("null");
    } else {
      sb.append(this.comment);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("image:");
    if (this.image == null) {
      sb.append("null");
    } else {
      sb.append(this.image);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (album != null) {
      album.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SongStandardSchemeFactory implements SchemeFactory {
    public SongStandardScheme getScheme() {
      return new SongStandardScheme();
    }
  }

  private static class SongStandardScheme extends StandardScheme<Song> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Song struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALBUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.album = new models.Referencer();
              struct.album.read(iprot);
              struct.setAlbumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LYRICS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lyrics = iprot.readString();
              struct.setLyricsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPOSERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.composers = new ArrayList<String>(_list0.size);
                String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.composers.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setComposersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KARA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kara = iprot.readString();
              struct.setKaraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.duration = iprot.readI16();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // KINDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.kinds = new ArrayList<models.Referencer>(_list3.size);
                models.Referencer _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new models.Referencer();
                  _elem4.read(iprot);
                  struct.kinds.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setKindsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SINGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.singers = new ArrayList<models.Referencer>(_list6.size);
                models.Referencer _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new models.Referencer();
                  _elem7.read(iprot);
                  struct.singers.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setSingersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VIEWS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.views = iprot.readI64();
              struct.setViewsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // IMAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.image = iprot.readString();
              struct.setImageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Song struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.album != null) {
        oprot.writeFieldBegin(ALBUM_FIELD_DESC);
        struct.album.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.lyrics != null) {
        oprot.writeFieldBegin(LYRICS_FIELD_DESC);
        oprot.writeString(struct.lyrics);
        oprot.writeFieldEnd();
      }
      if (struct.composers != null) {
        oprot.writeFieldBegin(COMPOSERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.composers.size()));
          for (String _iter9 : struct.composers)
          {
            oprot.writeString(_iter9);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.kara != null) {
        oprot.writeFieldBegin(KARA_FIELD_DESC);
        oprot.writeString(struct.kara);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI16(struct.duration);
      oprot.writeFieldEnd();
      if (struct.kinds != null) {
        oprot.writeFieldBegin(KINDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.kinds.size()));
          for (models.Referencer _iter10 : struct.kinds)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.singers != null) {
        oprot.writeFieldBegin(SINGERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.singers.size()));
          for (models.Referencer _iter11 : struct.singers)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VIEWS_FIELD_DESC);
      oprot.writeI64(struct.views);
      oprot.writeFieldEnd();
      if (struct.comment != null) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(struct.comment);
        oprot.writeFieldEnd();
      }
      if (struct.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        oprot.writeString(struct.image);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SongTupleSchemeFactory implements SchemeFactory {
    public SongTupleScheme getScheme() {
      return new SongTupleScheme();
    }
  }

  private static class SongTupleScheme extends TupleScheme<Song> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Song struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetAlbum()) {
        optionals.set(1);
      }
      if (struct.isSetLyrics()) {
        optionals.set(2);
      }
      if (struct.isSetComposers()) {
        optionals.set(3);
      }
      if (struct.isSetKara()) {
        optionals.set(4);
      }
      if (struct.isSetDuration()) {
        optionals.set(5);
      }
      if (struct.isSetKinds()) {
        optionals.set(6);
      }
      if (struct.isSetSingers()) {
        optionals.set(7);
      }
      if (struct.isSetViews()) {
        optionals.set(8);
      }
      if (struct.isSetComment()) {
        optionals.set(9);
      }
      if (struct.isSetImage()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetAlbum()) {
        struct.album.write(oprot);
      }
      if (struct.isSetLyrics()) {
        oprot.writeString(struct.lyrics);
      }
      if (struct.isSetComposers()) {
        {
          oprot.writeI32(struct.composers.size());
          for (String _iter12 : struct.composers)
          {
            oprot.writeString(_iter12);
          }
        }
      }
      if (struct.isSetKara()) {
        oprot.writeString(struct.kara);
      }
      if (struct.isSetDuration()) {
        oprot.writeI16(struct.duration);
      }
      if (struct.isSetKinds()) {
        {
          oprot.writeI32(struct.kinds.size());
          for (models.Referencer _iter13 : struct.kinds)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetSingers()) {
        {
          oprot.writeI32(struct.singers.size());
          for (models.Referencer _iter14 : struct.singers)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetViews()) {
        oprot.writeI64(struct.views);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetImage()) {
        oprot.writeString(struct.image);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Song struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.album = new models.Referencer();
        struct.album.read(iprot);
        struct.setAlbumIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lyrics = iprot.readString();
        struct.setLyricsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.composers = new ArrayList<String>(_list15.size);
          String _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readString();
            struct.composers.add(_elem16);
          }
        }
        struct.setComposersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.kara = iprot.readString();
        struct.setKaraIsSet(true);
      }
      if (incoming.get(5)) {
        struct.duration = iprot.readI16();
        struct.setDurationIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.kinds = new ArrayList<models.Referencer>(_list18.size);
          models.Referencer _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new models.Referencer();
            _elem19.read(iprot);
            struct.kinds.add(_elem19);
          }
        }
        struct.setKindsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.singers = new ArrayList<models.Referencer>(_list21.size);
          models.Referencer _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new models.Referencer();
            _elem22.read(iprot);
            struct.singers.add(_elem22);
          }
        }
        struct.setSingersIsSet(true);
      }
      if (incoming.get(8)) {
        struct.views = iprot.readI64();
        struct.setViewsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(10)) {
        struct.image = iprot.readString();
        struct.setImageIsSet(true);
      }
    }
  }

}

