/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package mp3.utils.thrift.models;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-12-13")
public class TSinger implements org.apache.thrift.TBase<TSinger, TSinger._Fields>, java.io.Serializable, Cloneable, Comparable<TSinger> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSinger");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REALNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("realname", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DOB_FIELD_DESC = new org.apache.thrift.protocol.TField("dob", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SONGS_FIELD_DESC = new org.apache.thrift.protocol.TField("songs", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ALBUMS_FIELD_DESC = new org.apache.thrift.protocol.TField("albums", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField VIDEOS_FIELD_DESC = new org.apache.thrift.protocol.TField("videos", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField IMG_COVER_FIELD_DESC = new org.apache.thrift.protocol.TField("imgCover", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IMG_AVATAR_FIELD_DESC = new org.apache.thrift.protocol.TField("imgAvatar", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSingerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSingerTupleSchemeFactory());
  }

  public String id; // required
  public String name; // required
  public String realname; // required
  public String dob; // required
  public String country; // required
  public String description; // required
  public List<mp3.utils.thrift.models.TReferencer> songs; // required
  public List<mp3.utils.thrift.models.TReferencer> albums; // required
  public List<mp3.utils.thrift.models.TReferencer> videos; // required
  public String imgCover; // required
  public String imgAvatar; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    REALNAME((short)3, "realname"),
    DOB((short)4, "dob"),
    COUNTRY((short)5, "country"),
    DESCRIPTION((short)6, "description"),
    SONGS((short)7, "songs"),
    ALBUMS((short)8, "albums"),
    VIDEOS((short)9, "videos"),
    IMG_COVER((short)10, "imgCover"),
    IMG_AVATAR((short)11, "imgAvatar");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // REALNAME
          return REALNAME;
        case 4: // DOB
          return DOB;
        case 5: // COUNTRY
          return COUNTRY;
        case 6: // DESCRIPTION
          return DESCRIPTION;
        case 7: // SONGS
          return SONGS;
        case 8: // ALBUMS
          return ALBUMS;
        case 9: // VIDEOS
          return VIDEOS;
        case 10: // IMG_COVER
          return IMG_COVER;
        case 11: // IMG_AVATAR
          return IMG_AVATAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REALNAME, new org.apache.thrift.meta_data.FieldMetaData("realname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOB, new org.apache.thrift.meta_data.FieldMetaData("dob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SONGS, new org.apache.thrift.meta_data.FieldMetaData("songs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, mp3.utils.thrift.models.TReferencer.class))));
    tmpMap.put(_Fields.ALBUMS, new org.apache.thrift.meta_data.FieldMetaData("albums", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, mp3.utils.thrift.models.TReferencer.class))));
    tmpMap.put(_Fields.VIDEOS, new org.apache.thrift.meta_data.FieldMetaData("videos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, mp3.utils.thrift.models.TReferencer.class))));
    tmpMap.put(_Fields.IMG_COVER, new org.apache.thrift.meta_data.FieldMetaData("imgCover", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMG_AVATAR, new org.apache.thrift.meta_data.FieldMetaData("imgAvatar", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSinger.class, metaDataMap);
  }

  public TSinger() {
  }

  public TSinger(
    String id,
    String name,
    String realname,
    String dob,
    String country,
    String description,
    List<mp3.utils.thrift.models.TReferencer> songs,
    List<mp3.utils.thrift.models.TReferencer> albums,
    List<mp3.utils.thrift.models.TReferencer> videos,
    String imgCover,
    String imgAvatar)
  {
    this();
    this.id = id;
    this.name = name;
    this.realname = realname;
    this.dob = dob;
    this.country = country;
    this.description = description;
    this.songs = songs;
    this.albums = albums;
    this.videos = videos;
    this.imgCover = imgCover;
    this.imgAvatar = imgAvatar;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSinger(TSinger other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetRealname()) {
      this.realname = other.realname;
    }
    if (other.isSetDob()) {
      this.dob = other.dob;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetSongs()) {
      List<mp3.utils.thrift.models.TReferencer> __this__songs = new ArrayList<mp3.utils.thrift.models.TReferencer>(other.songs.size());
      for (mp3.utils.thrift.models.TReferencer other_element : other.songs) {
        __this__songs.add(new mp3.utils.thrift.models.TReferencer(other_element));
      }
      this.songs = __this__songs;
    }
    if (other.isSetAlbums()) {
      List<mp3.utils.thrift.models.TReferencer> __this__albums = new ArrayList<mp3.utils.thrift.models.TReferencer>(other.albums.size());
      for (mp3.utils.thrift.models.TReferencer other_element : other.albums) {
        __this__albums.add(new mp3.utils.thrift.models.TReferencer(other_element));
      }
      this.albums = __this__albums;
    }
    if (other.isSetVideos()) {
      List<mp3.utils.thrift.models.TReferencer> __this__videos = new ArrayList<mp3.utils.thrift.models.TReferencer>(other.videos.size());
      for (mp3.utils.thrift.models.TReferencer other_element : other.videos) {
        __this__videos.add(new mp3.utils.thrift.models.TReferencer(other_element));
      }
      this.videos = __this__videos;
    }
    if (other.isSetImgCover()) {
      this.imgCover = other.imgCover;
    }
    if (other.isSetImgAvatar()) {
      this.imgAvatar = other.imgAvatar;
    }
  }

  public TSinger deepCopy() {
    return new TSinger(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.realname = null;
    this.dob = null;
    this.country = null;
    this.description = null;
    this.songs = null;
    this.albums = null;
    this.videos = null;
    this.imgCover = null;
    this.imgAvatar = null;
  }

  public String getId() {
    return this.id;
  }

  public TSinger setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public TSinger setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getRealname() {
    return this.realname;
  }

  public TSinger setRealname(String realname) {
    this.realname = realname;
    return this;
  }

  public void unsetRealname() {
    this.realname = null;
  }

  /** Returns true if field realname is set (has been assigned a value) and false otherwise */
  public boolean isSetRealname() {
    return this.realname != null;
  }

  public void setRealnameIsSet(boolean value) {
    if (!value) {
      this.realname = null;
    }
  }

  public String getDob() {
    return this.dob;
  }

  public TSinger setDob(String dob) {
    this.dob = dob;
    return this;
  }

  public void unsetDob() {
    this.dob = null;
  }

  /** Returns true if field dob is set (has been assigned a value) and false otherwise */
  public boolean isSetDob() {
    return this.dob != null;
  }

  public void setDobIsSet(boolean value) {
    if (!value) {
      this.dob = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public TSinger setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public TSinger setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getSongsSize() {
    return (this.songs == null) ? 0 : this.songs.size();
  }

  public java.util.Iterator<mp3.utils.thrift.models.TReferencer> getSongsIterator() {
    return (this.songs == null) ? null : this.songs.iterator();
  }

  public void addToSongs(mp3.utils.thrift.models.TReferencer elem) {
    if (this.songs == null) {
      this.songs = new ArrayList<mp3.utils.thrift.models.TReferencer>();
    }
    this.songs.add(elem);
  }

  public List<mp3.utils.thrift.models.TReferencer> getSongs() {
    return this.songs;
  }

  public TSinger setSongs(List<mp3.utils.thrift.models.TReferencer> songs) {
    this.songs = songs;
    return this;
  }

  public void unsetSongs() {
    this.songs = null;
  }

  /** Returns true if field songs is set (has been assigned a value) and false otherwise */
  public boolean isSetSongs() {
    return this.songs != null;
  }

  public void setSongsIsSet(boolean value) {
    if (!value) {
      this.songs = null;
    }
  }

  public int getAlbumsSize() {
    return (this.albums == null) ? 0 : this.albums.size();
  }

  public java.util.Iterator<mp3.utils.thrift.models.TReferencer> getAlbumsIterator() {
    return (this.albums == null) ? null : this.albums.iterator();
  }

  public void addToAlbums(mp3.utils.thrift.models.TReferencer elem) {
    if (this.albums == null) {
      this.albums = new ArrayList<mp3.utils.thrift.models.TReferencer>();
    }
    this.albums.add(elem);
  }

  public List<mp3.utils.thrift.models.TReferencer> getAlbums() {
    return this.albums;
  }

  public TSinger setAlbums(List<mp3.utils.thrift.models.TReferencer> albums) {
    this.albums = albums;
    return this;
  }

  public void unsetAlbums() {
    this.albums = null;
  }

  /** Returns true if field albums is set (has been assigned a value) and false otherwise */
  public boolean isSetAlbums() {
    return this.albums != null;
  }

  public void setAlbumsIsSet(boolean value) {
    if (!value) {
      this.albums = null;
    }
  }

  public int getVideosSize() {
    return (this.videos == null) ? 0 : this.videos.size();
  }

  public java.util.Iterator<mp3.utils.thrift.models.TReferencer> getVideosIterator() {
    return (this.videos == null) ? null : this.videos.iterator();
  }

  public void addToVideos(mp3.utils.thrift.models.TReferencer elem) {
    if (this.videos == null) {
      this.videos = new ArrayList<mp3.utils.thrift.models.TReferencer>();
    }
    this.videos.add(elem);
  }

  public List<mp3.utils.thrift.models.TReferencer> getVideos() {
    return this.videos;
  }

  public TSinger setVideos(List<mp3.utils.thrift.models.TReferencer> videos) {
    this.videos = videos;
    return this;
  }

  public void unsetVideos() {
    this.videos = null;
  }

  /** Returns true if field videos is set (has been assigned a value) and false otherwise */
  public boolean isSetVideos() {
    return this.videos != null;
  }

  public void setVideosIsSet(boolean value) {
    if (!value) {
      this.videos = null;
    }
  }

  public String getImgCover() {
    return this.imgCover;
  }

  public TSinger setImgCover(String imgCover) {
    this.imgCover = imgCover;
    return this;
  }

  public void unsetImgCover() {
    this.imgCover = null;
  }

  /** Returns true if field imgCover is set (has been assigned a value) and false otherwise */
  public boolean isSetImgCover() {
    return this.imgCover != null;
  }

  public void setImgCoverIsSet(boolean value) {
    if (!value) {
      this.imgCover = null;
    }
  }

  public String getImgAvatar() {
    return this.imgAvatar;
  }

  public TSinger setImgAvatar(String imgAvatar) {
    this.imgAvatar = imgAvatar;
    return this;
  }

  public void unsetImgAvatar() {
    this.imgAvatar = null;
  }

  /** Returns true if field imgAvatar is set (has been assigned a value) and false otherwise */
  public boolean isSetImgAvatar() {
    return this.imgAvatar != null;
  }

  public void setImgAvatarIsSet(boolean value) {
    if (!value) {
      this.imgAvatar = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case REALNAME:
      if (value == null) {
        unsetRealname();
      } else {
        setRealname((String)value);
      }
      break;

    case DOB:
      if (value == null) {
        unsetDob();
      } else {
        setDob((String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case SONGS:
      if (value == null) {
        unsetSongs();
      } else {
        setSongs((List<mp3.utils.thrift.models.TReferencer>)value);
      }
      break;

    case ALBUMS:
      if (value == null) {
        unsetAlbums();
      } else {
        setAlbums((List<mp3.utils.thrift.models.TReferencer>)value);
      }
      break;

    case VIDEOS:
      if (value == null) {
        unsetVideos();
      } else {
        setVideos((List<mp3.utils.thrift.models.TReferencer>)value);
      }
      break;

    case IMG_COVER:
      if (value == null) {
        unsetImgCover();
      } else {
        setImgCover((String)value);
      }
      break;

    case IMG_AVATAR:
      if (value == null) {
        unsetImgAvatar();
      } else {
        setImgAvatar((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case REALNAME:
      return getRealname();

    case DOB:
      return getDob();

    case COUNTRY:
      return getCountry();

    case DESCRIPTION:
      return getDescription();

    case SONGS:
      return getSongs();

    case ALBUMS:
      return getAlbums();

    case VIDEOS:
      return getVideos();

    case IMG_COVER:
      return getImgCover();

    case IMG_AVATAR:
      return getImgAvatar();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case REALNAME:
      return isSetRealname();
    case DOB:
      return isSetDob();
    case COUNTRY:
      return isSetCountry();
    case DESCRIPTION:
      return isSetDescription();
    case SONGS:
      return isSetSongs();
    case ALBUMS:
      return isSetAlbums();
    case VIDEOS:
      return isSetVideos();
    case IMG_COVER:
      return isSetImgCover();
    case IMG_AVATAR:
      return isSetImgAvatar();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSinger)
      return this.equals((TSinger)that);
    return false;
  }

  public boolean equals(TSinger that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_realname = true && this.isSetRealname();
    boolean that_present_realname = true && that.isSetRealname();
    if (this_present_realname || that_present_realname) {
      if (!(this_present_realname && that_present_realname))
        return false;
      if (!this.realname.equals(that.realname))
        return false;
    }

    boolean this_present_dob = true && this.isSetDob();
    boolean that_present_dob = true && that.isSetDob();
    if (this_present_dob || that_present_dob) {
      if (!(this_present_dob && that_present_dob))
        return false;
      if (!this.dob.equals(that.dob))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_songs = true && this.isSetSongs();
    boolean that_present_songs = true && that.isSetSongs();
    if (this_present_songs || that_present_songs) {
      if (!(this_present_songs && that_present_songs))
        return false;
      if (!this.songs.equals(that.songs))
        return false;
    }

    boolean this_present_albums = true && this.isSetAlbums();
    boolean that_present_albums = true && that.isSetAlbums();
    if (this_present_albums || that_present_albums) {
      if (!(this_present_albums && that_present_albums))
        return false;
      if (!this.albums.equals(that.albums))
        return false;
    }

    boolean this_present_videos = true && this.isSetVideos();
    boolean that_present_videos = true && that.isSetVideos();
    if (this_present_videos || that_present_videos) {
      if (!(this_present_videos && that_present_videos))
        return false;
      if (!this.videos.equals(that.videos))
        return false;
    }

    boolean this_present_imgCover = true && this.isSetImgCover();
    boolean that_present_imgCover = true && that.isSetImgCover();
    if (this_present_imgCover || that_present_imgCover) {
      if (!(this_present_imgCover && that_present_imgCover))
        return false;
      if (!this.imgCover.equals(that.imgCover))
        return false;
    }

    boolean this_present_imgAvatar = true && this.isSetImgAvatar();
    boolean that_present_imgAvatar = true && that.isSetImgAvatar();
    if (this_present_imgAvatar || that_present_imgAvatar) {
      if (!(this_present_imgAvatar && that_present_imgAvatar))
        return false;
      if (!this.imgAvatar.equals(that.imgAvatar))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true && (isSetId());
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_realname = true && (isSetRealname());
    list.add(present_realname);
    if (present_realname)
      list.add(realname);

    boolean present_dob = true && (isSetDob());
    list.add(present_dob);
    if (present_dob)
      list.add(dob);

    boolean present_country = true && (isSetCountry());
    list.add(present_country);
    if (present_country)
      list.add(country);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_songs = true && (isSetSongs());
    list.add(present_songs);
    if (present_songs)
      list.add(songs);

    boolean present_albums = true && (isSetAlbums());
    list.add(present_albums);
    if (present_albums)
      list.add(albums);

    boolean present_videos = true && (isSetVideos());
    list.add(present_videos);
    if (present_videos)
      list.add(videos);

    boolean present_imgCover = true && (isSetImgCover());
    list.add(present_imgCover);
    if (present_imgCover)
      list.add(imgCover);

    boolean present_imgAvatar = true && (isSetImgAvatar());
    list.add(present_imgAvatar);
    if (present_imgAvatar)
      list.add(imgAvatar);

    return list.hashCode();
  }

  @Override
  public int compareTo(TSinger other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRealname()).compareTo(other.isSetRealname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realname, other.realname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDob()).compareTo(other.isSetDob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dob, other.dob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSongs()).compareTo(other.isSetSongs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSongs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.songs, other.songs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlbums()).compareTo(other.isSetAlbums());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlbums()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.albums, other.albums);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVideos()).compareTo(other.isSetVideos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVideos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.videos, other.videos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgCover()).compareTo(other.isSetImgCover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgCover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgCover, other.imgCover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImgAvatar()).compareTo(other.isSetImgAvatar());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImgAvatar()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imgAvatar, other.imgAvatar);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSinger(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("realname:");
    if (this.realname == null) {
      sb.append("null");
    } else {
      sb.append(this.realname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dob:");
    if (this.dob == null) {
      sb.append("null");
    } else {
      sb.append(this.dob);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("songs:");
    if (this.songs == null) {
      sb.append("null");
    } else {
      sb.append(this.songs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("albums:");
    if (this.albums == null) {
      sb.append("null");
    } else {
      sb.append(this.albums);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("videos:");
    if (this.videos == null) {
      sb.append("null");
    } else {
      sb.append(this.videos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgCover:");
    if (this.imgCover == null) {
      sb.append("null");
    } else {
      sb.append(this.imgCover);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imgAvatar:");
    if (this.imgAvatar == null) {
      sb.append("null");
    } else {
      sb.append(this.imgAvatar);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (id == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSingerStandardSchemeFactory implements SchemeFactory {
    public TSingerStandardScheme getScheme() {
      return new TSingerStandardScheme();
    }
  }

  private static class TSingerStandardScheme extends StandardScheme<TSinger> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSinger struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REALNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.realname = iprot.readString();
              struct.setRealnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dob = iprot.readString();
              struct.setDobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SONGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.songs = new ArrayList<mp3.utils.thrift.models.TReferencer>(_list0.size);
                mp3.utils.thrift.models.TReferencer _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new mp3.utils.thrift.models.TReferencer();
                  _elem1.read(iprot);
                  struct.songs.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setSongsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALBUMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.albums = new ArrayList<mp3.utils.thrift.models.TReferencer>(_list3.size);
                mp3.utils.thrift.models.TReferencer _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = new mp3.utils.thrift.models.TReferencer();
                  _elem4.read(iprot);
                  struct.albums.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setAlbumsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VIDEOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.videos = new ArrayList<mp3.utils.thrift.models.TReferencer>(_list6.size);
                mp3.utils.thrift.models.TReferencer _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new mp3.utils.thrift.models.TReferencer();
                  _elem7.read(iprot);
                  struct.videos.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setVideosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IMG_COVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imgCover = iprot.readString();
              struct.setImgCoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IMG_AVATAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imgAvatar = iprot.readString();
              struct.setImgAvatarIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSinger struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.realname != null) {
        oprot.writeFieldBegin(REALNAME_FIELD_DESC);
        oprot.writeString(struct.realname);
        oprot.writeFieldEnd();
      }
      if (struct.dob != null) {
        oprot.writeFieldBegin(DOB_FIELD_DESC);
        oprot.writeString(struct.dob);
        oprot.writeFieldEnd();
      }
      if (struct.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(struct.country);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.songs != null) {
        oprot.writeFieldBegin(SONGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.songs.size()));
          for (mp3.utils.thrift.models.TReferencer _iter9 : struct.songs)
          {
            _iter9.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.albums != null) {
        oprot.writeFieldBegin(ALBUMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.albums.size()));
          for (mp3.utils.thrift.models.TReferencer _iter10 : struct.albums)
          {
            _iter10.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.videos != null) {
        oprot.writeFieldBegin(VIDEOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.videos.size()));
          for (mp3.utils.thrift.models.TReferencer _iter11 : struct.videos)
          {
            _iter11.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.imgCover != null) {
        oprot.writeFieldBegin(IMG_COVER_FIELD_DESC);
        oprot.writeString(struct.imgCover);
        oprot.writeFieldEnd();
      }
      if (struct.imgAvatar != null) {
        oprot.writeFieldBegin(IMG_AVATAR_FIELD_DESC);
        oprot.writeString(struct.imgAvatar);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSingerTupleSchemeFactory implements SchemeFactory {
    public TSingerTupleScheme getScheme() {
      return new TSingerTupleScheme();
    }
  }

  private static class TSingerTupleScheme extends TupleScheme<TSinger> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSinger struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.id);
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetRealname()) {
        optionals.set(1);
      }
      if (struct.isSetDob()) {
        optionals.set(2);
      }
      if (struct.isSetCountry()) {
        optionals.set(3);
      }
      if (struct.isSetDescription()) {
        optionals.set(4);
      }
      if (struct.isSetSongs()) {
        optionals.set(5);
      }
      if (struct.isSetAlbums()) {
        optionals.set(6);
      }
      if (struct.isSetVideos()) {
        optionals.set(7);
      }
      if (struct.isSetImgCover()) {
        optionals.set(8);
      }
      if (struct.isSetImgAvatar()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetRealname()) {
        oprot.writeString(struct.realname);
      }
      if (struct.isSetDob()) {
        oprot.writeString(struct.dob);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetSongs()) {
        {
          oprot.writeI32(struct.songs.size());
          for (mp3.utils.thrift.models.TReferencer _iter12 : struct.songs)
          {
            _iter12.write(oprot);
          }
        }
      }
      if (struct.isSetAlbums()) {
        {
          oprot.writeI32(struct.albums.size());
          for (mp3.utils.thrift.models.TReferencer _iter13 : struct.albums)
          {
            _iter13.write(oprot);
          }
        }
      }
      if (struct.isSetVideos()) {
        {
          oprot.writeI32(struct.videos.size());
          for (mp3.utils.thrift.models.TReferencer _iter14 : struct.videos)
          {
            _iter14.write(oprot);
          }
        }
      }
      if (struct.isSetImgCover()) {
        oprot.writeString(struct.imgCover);
      }
      if (struct.isSetImgAvatar()) {
        oprot.writeString(struct.imgAvatar);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSinger struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readString();
      struct.setIdIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.realname = iprot.readString();
        struct.setRealnameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dob = iprot.readString();
        struct.setDobIsSet(true);
      }
      if (incoming.get(3)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.songs = new ArrayList<mp3.utils.thrift.models.TReferencer>(_list15.size);
          mp3.utils.thrift.models.TReferencer _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = new mp3.utils.thrift.models.TReferencer();
            _elem16.read(iprot);
            struct.songs.add(_elem16);
          }
        }
        struct.setSongsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.albums = new ArrayList<mp3.utils.thrift.models.TReferencer>(_list18.size);
          mp3.utils.thrift.models.TReferencer _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = new mp3.utils.thrift.models.TReferencer();
            _elem19.read(iprot);
            struct.albums.add(_elem19);
          }
        }
        struct.setAlbumsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.videos = new ArrayList<mp3.utils.thrift.models.TReferencer>(_list21.size);
          mp3.utils.thrift.models.TReferencer _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new mp3.utils.thrift.models.TReferencer();
            _elem22.read(iprot);
            struct.videos.add(_elem22);
          }
        }
        struct.setVideosIsSet(true);
      }
      if (incoming.get(8)) {
        struct.imgCover = iprot.readString();
        struct.setImgCoverIsSet(true);
      }
      if (incoming.get(9)) {
        struct.imgAvatar = iprot.readString();
        struct.setImgAvatarIsSet(true);
      }
    }
  }

}

